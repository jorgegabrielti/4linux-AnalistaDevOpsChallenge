stages:
  - Validate project
  - SAST & SCA
  - Build and Push Docker Image
  - Deploy on app machine

lint:
  stage: Validate project
  tags:
    - app-proxmox-sgoncalves
  script:
    - npm install eslint eslint-config-standard-with-typescript eslint-plugin-import eslint-plugin-node eslint-plugin-promise typescript@4.4.2 @typescript-eslint/eslint-plugin @typescript-eslint/parser
    - npm run lint

sast:
  stage: SAST & SCA
  tags:
    - app-proxmox-sgoncalves
  script:
    - '/usr/local/bin/horusec start -p . -a ${HORUSEC_API_KEY} -u http://devsecops.labs.devsecops:8000 -G true --enable-git-history=true -w'

build:
  stage: Build and Push Docker Image
  tags:
    - app-proxmox-sgoncalves
  services:
    - docker:latest
  script:
     - "docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}"
     - "docker build -t ${CI_REGISTRY_USER}/coffee-shop:latest ."
     - "docker push ${CI_REGISTRY_USER}/coffee-shop:latest"

deploy:
  stage: Deploy on app machine
  tags:
    - app-proxmox-sgoncalves
  script:
     - "docker rm -f coffee-shop-app 2> /dev/null"
     - "docker pull ${CI_REGISTRY_USER}/coffee-shop:latest"
     - "docker run -d -p 3000:3000 --name coffee-shop-app ${CI_REGISTRY_USER}/coffee-shop"

container_scanning:
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  variables:
    # No need to clone the repo, we exclusively work on artifacts.  See
    # https://docs.gitlab.com/ee/ci/runners/README.html#git-strategy
    GIT_STRATEGY: none
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
    FULL_IMAGE_NAME: "${CI_REGISTRY_USER}/coffee-shop:latest"
  script:
    - trivy --version
    # cache cleanup is needed when scanning images with the same tags, it does not remove the database
    - time trivy image --clear-cache
    # update vulnerabilities db
    - time trivy --download-db-only --no-progress --cache-dir .trivycache/
    # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
    - time trivy --exit-code 0 --cache-dir .trivycache/ --no-progress --format template --template "@/contrib/gitlab.tpl"
        --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" "$FULL_IMAGE_NAME"
    # Prints full report
    - time trivy --exit-code 0 --cache-dir .trivycache/ --no-progress "$FULL_IMAGE_NAME"
    # Fail on critical vulnerabilities
    - time trivy --exit-code 1 --cache-dir .trivycache/ --severity CRITICAL --no-progress "$FULL_IMAGE_NAME"
  cache:
    paths:
      - .trivycache/
  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold)
  artifacts:
    when:                          always
    reports:
      container_scanning:          gl-container-scanning-report.json
  tags:
    - docker-runner

